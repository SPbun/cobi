#
# use this file to set the options necessary to build the configurable binary instrumenter
#

#set compilers here (no other than gcc/g++ is supported, 4.3, 4.4, 4.1 working)
CC=gcc
CXX=g++
LN=g++

#set this folder to the base of your dependencies if you used the supplied dependency archive
#DEPBASE=$(HOME)/local/cobi-deps/
DEPBASE=$(HOME)/packages/
#DEPBASE=

#Boost
BOOST_INC_DIR=/usr/include/boost
BOOST_LIB_DIR=/usr/lib/x86_64-linux-gnu/
PROGRAM_OPTIONS_LIB=boost_program_options
REGEX_LIB=boost_regex

#Dyninst Variables
DYNINST_INC_DIR=$(DEPBASE)dyninstAPI/src/include
DYNINST_LIB_DIR=$(DEPBASE)dyninstAPI/src/x86_64-unknown-linux2.4/lib

#XERCES Variables
XERCES_INC_DIR=$(DEPBASE)xerces3/include
XERCES_LIB_DIR=/usr/lib/x86_64-linux-gnu/
XERCES_LIB=xerces-c

#optimize flag
OPT = -O2

#debug flag
DEBUG = -g

#warn flag
WARN=-Wall

# Flag that switches on explicit syving of floating point registers.
# If your instrumentation uses floating point registers, it may alter the results form the application
# if dyninst does not correctly detect which registers are used. Thus, to ensure correct application 
# behavior the floating point registers are explicitly saved. However, this increases the overhead 
# significantly. Thus, if you are sure your code does not alter the floating point registers, you may
# comment out this flag.
OPT += -DCOBI_ENABLE_FPR_SAVE

#target directory for .o files during build
OBJ_DIR=ciObjectFiles/

INC = -I$(BOOST_INC_DIR) -I$(DYNINST_INC_DIR) -I$(XERCES_INC_DIR) -Iinclude/

LIB = 

#additional libs? 
#this may be necessary if you see an undefined reference to "cplus_demangle"
LIB += -Wl,-no-as-needed -lcommon -liberty

#needed libraries
LIB += -l$(PROGRAM_OPTIONS_LIB) -l$(REGEX_LIB) -ldyninstAPI -l$(XERCES_LIB) -L$(XERCES_LIB_DIR) -L$(BOOST_LIB_DIR) -L$(DYNINST_LIB_DIR) -lsymtabAPI -linstructionAPI -lparseAPI

#may be necessary
LIB += -Wl,-rpath $(BOOST_LIB_DIR) -Wl,-rpath $(DYNINST_LIB_DIR) -Wl,-rpath $(XERCES_LIB_DIR)

#set name of binary
BIN_NAME=cobi

VPATH=$OBJ_DIR
